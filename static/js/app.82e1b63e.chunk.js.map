{"version":3,"sources":["screens/HomeScreen.js","services/firebase.js","secrets.js","components/MovieCard.js","components/AddMovieForm.js","screens/AddMovieScreen.js","screens/MoviesScreen.js","screens/ListsScreen.js","screens/ListScreen.js","screens/AddMovieToListScreen.js","screens/RemoveMovieFromListScreen.js","screens/RandomMovieScreen.js","screens/LoginScreen.js","actions/index.js","reducers/index.js","App.js","web-build/register-service-worker.js"],"names":["HomeScreen","route","navigation","appState","useSelector","state","SafeAreaView","style","styles","container","h4","marginBottom","h3","title","onPress","navigate","button","can_edit","Fragment","type","StyleSheet","create","flex","alignItems","margin","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseDB","firebaseAuth","MovieCard","this","props","editing_enabled","movie","id","editable","onEdit","movieAttributeStyle","marginTop","movieAttributeNameStyle","fontWeight","TouchableOpacity","movieCard","handlePress","View","flexDirection","flexGrow","year","titleStyle","fontSize","handleEdit","Image","source","uri","poster","resizeMode","genre","runtime","actors","director","imdbRating","plot","Component","backgroundColor","padding","borderRadius","AddMovieForm","imdbID","e","value","toLowerCase","setState","url","fetch","method","headers","rapid_api_key","then","response","json","result","parseMovieData","movieData","Title","Year","Genre","Actors","Runtime","Director","Plot","Poster","ref","push","onReturnHome","label","onChangeText","handleImdbIDChange","handleSearch","handleAddMovie","containerStyle","handleBack","AddMovieScreen","MoviesScreen","useState","movies","setMovies","useEffect","refreshMovies","addListener","once","snapshot","data","forEach","datapoint","val","key","sort","a","b","aTitle","bTitle","map","Text","ListsScreen","lists","setLists","isAdding","setIsAdding","newList","setNewList","refreshLists","list","movieIds","Object","entries","aName","name","bName","ListScreen","listId","setListId","setMovieIds","params","ids","i","length","j","Math","floor","random","shuffle","filter","includes","goToEditMovieScreen","AddMovieToListScreen","addMovieToList","movieId","newMovieIds","RemoveMovieFromListScreen","setMovie","backToList","index","indexOf","splice","remove","RandomMovieScreen","refreshMovie","randomMovie","LoginScreen","email","setEmail","password","setPassword","dispatch","useDispatch","retrieveAPIKey","user","updates","payload","updateAppState","secureTextEntry","signInWithEmailAndPassword","catch","error","console","log","initialState","rootReducer","action","Stack","createStackNavigator","store","createStore","App","NavigationContainer","Navigator","initialRouteName","Screen","component","options","navigator","window","addEventListener","serviceWorker","register","scope","info"],"mappings":"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","file":"static/js/app.82e1b63e.chunk.js","sourcesContent":["import React from \"react\";\nimport { SafeAreaView, StyleSheet } from \"react-native\";\nimport { Button, Text } from 'react-native-elements';\nimport { useSelector } from 'react-redux';\n\nexport const HomeScreen = ({ route, navigation }) => {\n    const appState = useSelector(state => state);\n\n    const goToMoviesScreen = () => {\n        navigation.navigate(\"Movies\", { });\n    }\n\n    const goToListsScreen = () => {\n        navigation.navigate(\"Lists\", { });\n    }\n\n    const goToLogin = () => {\n        navigation.navigate(\"Login\", { });\n    }\n\n    return (\n        <SafeAreaView style={styles.container}>\n            <Text h4 style={{marginBottom: 30}}>Need an idea for a movie to watch? Check out the lists!</Text>\n            <Text h3 style={{marginBottom: 20}}>Movie Lists</Text>\n            <Button title=\"See Lists\"\n                    onPress={goToListsScreen}\n                    style={styles.button}></Button>\n            { appState.can_edit &&\n                <React.Fragment>\n                        <Text h3 style={{marginBottom: 20}}>Movie Management</Text>\n                        <Button title=\"Manage\"\n                                onPress={goToMoviesScreen}\n                                style={styles.button}></Button>\n                </React.Fragment>\n            }\n                <Button title=\"Admin Login\"\n                        type=\"outline\"\n                        onPress={goToLogin}\n                        style={styles.button}></Button>\n        </SafeAreaView>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      alignItems: 'center',\n      margin: 20\n    },\n    button: {\n        marginBottom: 20\n    }\n  });","import * as firebase from 'firebase';\nimport { FIREBASE_CONFIG } from '../secrets';\n\nfirebase.initializeApp(FIREBASE_CONFIG);\n\nexport const firebaseDB = firebase.database();\nexport const firebaseAuth = firebase.auth();","export const FIREBASE_CONFIG = {\n    apiKey: \"AIzaSyCc7bc5d8oxIHvy_zyMaG-fYjecX_FuEjo\",\n    authDomain: \"marcs-movies.firebaseapp.com\",\n    databaseURL: \"https://marcs-movies.firebaseio.com\",\n    projectId: \"marcs-movies\",\n    storageBucket: \"marcs-movies.appspot.com\",\n    messagingSenderId: \"502568475623\",\n    appId: \"1:502568475623:web:6fdb31741a1ee95bd2bb42\",\n    measurementId: \"G-CDV1J8J40Q\"\n};","import React, { Component } from 'react';\nimport { View, Image, StyleSheet, TouchableOpacity } from 'react-native'\nimport { Text } from 'react-native-elements';\nimport { Button } from 'react-native-elements';\n\nclass MovieCard extends Component {\n    handlePress() {\n        if (this.props.onPress && this.props.editing_enabled) {\n            this.props.onPress(this.props.movie.id);\n        }\n    }\n\n    handleEdit() {\n        if (this.props.editable && this.props.onEdit && this.props.editing_enabled) {\n            this.props.onEdit(this.props.movie);\n        }\n    }\n\n    render() {\n        const movieAttributeStyle = {\n            marginTop: 5,\n            marginBottom: 5\n        }\n        const movieAttributeNameStyle = {\n            fontWeight: \"bold\"\n        }\n        return (\n            <React.Fragment>\n                { this.props.movie != null && \n                    <TouchableOpacity style={styles.movieCard} onPress={() => this.handlePress(this.props.movie.id)}>\n                        <View style={{ flex: 1, flexDirection: 'row', marginBottom: 10 }}>\n                            <Text h4 style={{ flexGrow: 1 }}>{this.props.movie.title} ({this.props.movie.year})</Text>\n                            { this.props.editable && this.props.editing_enabled &&\n                                <Button title=\"Edit\" \n                                        type=\"outline\" \n                                        titleStyle={{ fontSize: 12 }} \n                                        onPress={() => this.handleEdit()}/>\n                            }\n                        </View>\n                        <View style={{ flex: 1, flexDirection: 'row' }}>\n                            <Image source={{uri: this.props.movie.poster}} \n                                style={{ flex: 1, resizeMode: 'contain', margin: 10 }}></Image>\n                            <View style={{ flex: 1 }}>\n                                <Text style={movieAttributeStyle}>\n                                    <Text style={movieAttributeNameStyle}>Genres: </Text>\n                                    {this.props.movie.genre} \n                                </Text>\n                                <Text style={movieAttributeStyle}>\n                                    <Text style={movieAttributeNameStyle}>Runtime: </Text>\n                                    {this.props.movie.runtime} \n                                </Text>\n                                <Text style={movieAttributeStyle}>\n                                    <Text style={movieAttributeNameStyle}>Actors: </Text>\n                                    {this.props.movie.actors} \n                                </Text>\n                                <Text style={movieAttributeStyle}>\n                                    <Text style={movieAttributeNameStyle}>Director: </Text>\n                                    {this.props.movie.director} \n                                </Text>\n                                <Text style={movieAttributeStyle}>\n                                    <Text style={movieAttributeNameStyle}>IMDB Rating: </Text>\n                                    {this.props.movie.imdbRating} \n                                </Text>              \n                            </View>\n                        </View>\n                        <Text style={movieAttributeStyle}>{this.props.movie.plot}</Text>\n                    </TouchableOpacity>\n                }\n            </React.Fragment>\n        )\n    }\n}\n\nexport default MovieCard;\n\nconst styles = StyleSheet.create({\n    movieCard: {\n        backgroundColor: '#fff',\n        padding: 15,\n        borderRadius: 10,\n        marginBottom: 20\n    }\n});","import React, { Component } from 'react';\nimport { Input, Button } from 'react-native-elements'\nimport { View, StyleSheet } from \"react-native\";\nimport { firebaseDB } from '../services/firebase';\nimport MovieCard from '../components/MovieCard';\n\nclass AddMovieForm extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { \n            imdbID: '',\n            movie: null\n        }\n    }\n\n    handleImdbIDChange(e) {\n        if (e) {\n            const value = e.toLowerCase();\n            this.setState({ imdbID: value });\n        }\n    }\n\n    handleSearch() {\n        const url = \"https://movie-database-imdb-alternative.p.rapidapi.com/?r=json&i=\" + this.state.imdbID;\n        fetch(url, {\n            method: \"GET\",\n            headers: {\n                \"x-rapidapi-host\": \"movie-database-imdb-alternative.p.rapidapi.com\",\n                \"x-rapidapi-key\": this.props.rapid_api_key,\n                \"useQueryString\": true\n            },\n          }).then(response => response.json())\n           .then(result =>  {\n               this.parseMovieData(result);\n               this.setState({ imdbID: '' });\n            });\n    }\n\n    parseMovieData(movieData) {\n        const movie = {\n            title: movieData.Title,\n            year: movieData.Year,\n            genre: movieData.Genre,\n            actors: movieData.Actors,\n            runtime: movieData.Runtime,\n            director: movieData.Director,\n            imdbRating: movieData.imdbRating,\n            plot: movieData.Plot,\n            poster: movieData.Poster\n        }\n        this.setState({ movie: movie });\n    }\n\n    handleAddMovie() {\n        firebaseDB.ref('movies').push(this.state.movie);\n        this.props.onReturnHome();\n    }\n\n    handleBack() {\n        this.setState({ movie: null });\n    }\n\n    render() {\n        return (\n            <View style={styles.container}>\n                { this.state.movie == null &&\n                    <React.Fragment>\n                        <Input label=\"IMDB Movie ID\"\n                               onChangeText={(e) => this.handleImdbIDChange(e)}></Input>\n                        <Button title=\"Search IMBD\"\n                                onPress={() => this.handleSearch()}></Button>\n                    </React.Fragment>\n                }\n                { this.state.movie != null && \n                    <React.Fragment>\n                        <MovieCard movie={this.state.movie}></MovieCard>\n                        <Button title=\"Add Movie\"\n                                onPress={() => this.handleAddMovie()}\n                                containerStyle={{ marginBottom: 15 }}></Button>\n                        <Button title=\"Back to Search\"\n                                onPress={() => this.handleBack()}\n                                containerStyle={{ marginBottom: 15 }}></Button>\n                    </React.Fragment>\n                }\n            </View>\n        )\n    }\n};\n\nexport default AddMovieForm;\n\nconst styles = StyleSheet.create({\n    container: {\n      padding: 20\n    }\n});","import React from \"react\";\nimport { SafeAreaView } from \"react-native\";\nimport AddMovieForm from \"../components/AddMovieForm\";\nimport { useSelector } from 'react-redux';\n\nexport const AddMovieScreen = ({ route, navigation }) => {\n    const appState = useSelector(state => state);\n\n    const goHomeScreen = () => {\n        navigation.navigate(\"Movies\", { });\n    }\n\n    return (\n        <SafeAreaView>\n            <AddMovieForm onReturnHome={goHomeScreen}\n                          rapid_api_key={appState.rapid_api_key}></AddMovieForm>\n        </SafeAreaView>\n    );\n};","import React, { useState, useEffect } from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { firebaseDB } from '../services/firebase';\nimport MovieCard from '../components/MovieCard';\nimport { Button } from 'react-native-elements';\n\nexport const MoviesScreen = ({ route, navigation }) => {\n    const [movies, setMovies] = useState();\n\n    useEffect(() => {\n        refreshMovies();\n        const navSubscription = navigation.addListener('focus', () => {\n            refreshMovies();\n        });\n     }, []);\n\n     const refreshMovies = () => {\n        firebaseDB.ref(\"movies\").once('value', function(snapshot) {\n            let data = []\n            snapshot.forEach(datapoint => {\n                const movie = datapoint.val();\n                movie.id = datapoint.key\n                data.push(movie);\n            })\n            data.sort(function(a, b) {\n                const aTitle = a.title.toLowerCase();\n                const bTitle = b.title.toLowerCase();\n                return (aTitle < bTitle) ? -1 : (aTitle > bTitle) ? 1 : 0;\n            });\n            setMovies(data);\n        });\n     }\n\n     const goToAddMovieScreen = () => {\n        navigation.navigate(\"Add Movie\", { });\n    }\n\n    return movies ? (\n        <View style={styles.container}>\n            <Button title=\"Add Movie\"\n                    onPress={goToAddMovieScreen}\n                    style={styles.button}></Button>\n            { movies.map(movie => \n                <MovieCard key={movie.id} movie={movie}></MovieCard>\n            )}\n        </View>\n      ) : (\n        <View style={styles.container}>\n            <Text>Loading...</Text>\n        </View>\n      );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        padding: 20\n    },\n    button: {\n        marginBottom: 20\n    }\n});","import React, { useState, useEffect } from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { firebaseDB } from '../services/firebase';\nimport { Button, Input } from 'react-native-elements';\nimport { useSelector } from 'react-redux';\n\nexport const ListsScreen = ({ route, navigation }) => {\n    const [lists, setLists] = useState();\n    const [isAdding, setIsAdding] = useState(false);\n    const [newList, setNewList] = useState();\n    const appState = useSelector(state => state);\n\n    useEffect(() => {\n        setIsAdding(false);\n        refreshLists();\n     }, []);\n\n    const refreshLists = () => {\n        firebaseDB.ref(\"lists\").once('value', function(snapshot) {\n            let data = []\n            snapshot.forEach(datapoint => {\n                var list = datapoint.val();\n                list.id = datapoint.key;\n                if (list.movies) {\n                    list.movieIds = Object.entries(list.movies).map(([k,v]) => v);\n                } else {\n                    list.movies = [];\n                    list.movieIds = [];\n                }\n                data.push(list);\n            })\n            data.sort(function(a, b) {\n                const aName = a.name.toLowerCase();\n                const bName= b.name.toLowerCase();\n                return (aName < bName) ? -1 : (aName > bName) ? 1 : 0;\n            });\n            setLists(data);\n        });\n    }\n\n    const showListForm = () => {\n        setIsAdding(true);\n    }\n\n    const handleNameChange = (e) => {\n        setNewList(e)\n    }\n\n    const cancelAdd = () => {\n        setIsAdding(false);\n    }\n\n    const addList = () => {\n        firebaseDB.ref('lists').push({ name: newList });\n        setIsAdding(false);\n        refreshLists();\n    }\n\n    const goToListScreen = (id, name, movieIds) => {\n        navigation.navigate(\"List\", { id: id, name: name, movieIds: movieIds});\n    }\n\n    return isAdding ? (\n        <View style={styles.container}>\n            <Input label=\"List Name\"\n                   onChangeText={handleNameChange}></Input>\n            <Button title=\"Add\"\n                    onPress={addList}\n                    style={styles.button}></Button>\n            <Button title=\"Cancel\"\n                    onPress={cancelAdd}\n                    style={styles.button}></Button>\n        </View>\n        ) : lists ? (\n        <View style={styles.container}>\n            { lists.map(list => \n                <Button key={list.id}\n                        title={list.name}\n                        type=\"outline\" \n                        style={styles.button} \n                        onPress={() => goToListScreen(list.id, list.name, list.movieIds)}/>\n            )}\n            { appState.can_edit && \n                <Button title=\"Add List\"\n                        onPress={showListForm}></Button>\n            }\n        </View>\n        ) : (\n        <View style={styles.container}>\n            <Text>Loading...</Text>\n        </View>\n      );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        padding: 20\n    },\n    button: {\n        marginBottom: 20\n    }\n});","import React, { useState, useEffect } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { firebaseDB } from '../services/firebase';\nimport { Button, Text } from 'react-native-elements';\nimport MovieCard from '../components/MovieCard';\nimport { useSelector } from 'react-redux';\n\nexport const ListScreen = ({ route, navigation }) => {\n    const [listId, setListId] = useState();\n    const [movieIds, setMovieIds] = useState([]);\n    const [movies, setMovies] = useState([]);\n    const appState = useSelector(state => state);\n\n    useEffect(() => {\n        setListId(route.params.id);\n        setMovieIds(route.params.movieIds);\n        refreshMovies(route.params.movieIds);\n        const navSubscription = navigation.addListener('focus', () => {\n            refreshMovies(route.params.movieIds);\n        });\n    }, []);\n\n    const refreshMovies = (ids) => {\n        setMovies([]);\n        firebaseDB.ref(\"movies\").once('value', function(snapshot) {\n            let data = []\n            snapshot.forEach(datapoint => {\n                const movie = datapoint.val();\n                movie.id = datapoint.key;\n                data.push(movie);\n            })\n            data = data.filter(movie => ids.includes(movie.id));\n            data = shuffle(data);\n            setMovies(data);\n        });\n    };\n\n    function shuffle(list) {\n        for (let i = list.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [list[i], list[j]] = [list[j], list[i]];\n        }\n        return list;\n    }\n\n    const goToAddMoviesScreen = () => {\n        navigation.navigate(\"Add Movie To List\", { listId: listId, movieIds: movieIds });\n    }\n\n    const goToEditMovieScreen = (movie) => {\n        navigation.navigate(\"Remove Movie From List\", { listId: listId, movieIds: movieIds, movie: movie });\n    }\n\n    const goToRandomMovieScreen = () => {\n        navigation.navigate(\"Random Movie\", { movieIds: movieIds });\n    }\n\n    return (\n        <View style={styles.container}>\n            <Text h3 style={{marginBottom: 20}}>Total Movies: {movies.length}</Text>\n            <Button title=\"Random Movie\"\n                    onPress={goToRandomMovieScreen}\n                    style={styles.button}></Button>\n            { appState.can_edit && \n                <Button title=\"Add Movie\"\n                        onPress={goToAddMoviesScreen}\n                        style={styles.button}></Button>\n            }\n            { movies.map(movie => \n                <MovieCard key={movie.id} \n                           movie={movie}\n                           editable={true}\n                           appState={appState}\n                           editing_enabled={appState.can_edit}\n                           onEdit={goToEditMovieScreen}></MovieCard>\n            )}\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        padding: 20\n    },\n    button: {\n        marginBottom: 20\n    }\n});","import React, { useState, useEffect } from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { firebaseDB } from '../services/firebase';\nimport MovieCard from '../components/MovieCard';\nimport { useSelector } from 'react-redux';\n\nexport const AddMovieToListScreen = ({ route, navigation }) => {\n    const [listId, setListId] = useState();\n    const [movieIds, setMovieIds] = useState([]);\n    const [movies, setMovies] = useState([]);\n    const appState = useSelector(state => state);\n\n    useEffect(() => {\n        setListId(route.params.listId);\n        setMovieIds(route.params.movieIds);\n        refreshMovies(route.params.movieIds);\n        const navSubscription = navigation.addListener('focus', () => {\n            refreshMovies(route.params.movieIds);\n        });\n    }, []);\n\n    const refreshMovies = (ids) => {\n        firebaseDB.ref(\"movies\").once('value', function(snapshot) {\n            let data = []\n            snapshot.forEach(datapoint => {\n                const movie = datapoint.val();\n                movie.id = datapoint.key;\n                data.push(movie);\n            });\n            data = data.filter(movie => !ids.includes(movie.id));\n            data.sort(function(a, b) {\n                const aTitle = a.title.toLowerCase();\n                const bTitle = b.title.toLowerCase();\n                return (aTitle < bTitle) ? -1 : (aTitle > bTitle) ? 1 : 0;\n            });\n            setMovies(data);\n        });\n    }\n\n    const addMovieToList = (movieId) => {\n        firebaseDB.ref('lists/' + listId + '/movies').push(movieId).then(() => {\n            const newMovieIds = movieIds;\n            newMovieIds.push(movieId);\n            navigation.navigate(\"List\", { id: listId, movieIds: newMovieIds });\n        });\n    }\n\n    return movies ? (\n        <View style={styles.container}>\n            { movies.map(movie => \n                <MovieCard key={movie.id} \n                           movie={movie}\n                           appState={appState}\n                           editing_enabled={appState.can_edit}\n                           onPress={addMovieToList}></MovieCard>\n            )}\n        </View>\n      ) : (\n        <View style={styles.container}>\n            <Text>Loading...</Text>\n        </View>\n      );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        padding: 20\n    }\n});","import React, { useState, useEffect } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { Text } from 'react-native-elements'\nimport { Button } from 'react-native-elements';\nimport { firebaseDB } from '../services/firebase';\n\nexport const RemoveMovieFromListScreen = ({ route, navigation }) => {\n    const [listId, setListId] = useState();\n    const [movie, setMovie] = useState({});\n    const [movieIds, setMovieIds] = useState([]);\n\n    useEffect(() => {\n        setListId(route.params.listId);\n        setMovie(route.params.movie);\n        setMovieIds(route.params.movieIds);\n    }, []);\n\n    const cancel = () => {\n        navigation.navigate(\"List\", { id: listId, movieIds: newMovieIds });\n    }\n\n    const remove = () => {\n        firebaseDB.ref('lists/' + listId + '/movies').once('value', function(snapshot) {\n            snapshot.forEach(datapoint => {\n                if (datapoint.val() == movie.id) {\n                    datapoint.ref.remove().then(() => {\n                        backToList();\n                    });\n                }\n            });\n        });\n    }\n\n    const backToList = () => {\n        const newMovieIds = movieIds;\n        const index = newMovieIds.indexOf(movie.id);\n        newMovieIds.splice(index, 1);\n        navigation.navigate(\"List\", { id: listId, movieIds: newMovieIds });\n    }\n\n    return (\n        <View style={styles.container}>\n            <Text h4 style={{ marginBottom: 20 }}>Remove {movie.title} ({movie.year}) from the list?</Text>\n            <Button title=\"Remove\"\n                    onPress={remove}\n                    style={styles.button}></Button>\n            <Button title=\"Cancel\"\n                    onPress={cancel}\n                    style={styles.button} \n                    type=\"outline\"></Button>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        padding: 20\n    },\n    button: {\n        marginBottom: 20\n    }\n});","import React, { useState, useEffect } from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { firebaseDB } from '../services/firebase';\nimport MovieCard from '../components/MovieCard';\nimport { Button } from 'react-native-elements';\n\nexport const RandomMovieScreen = ({ route, navigation }) => {\n    const [movie, setMovie] = useState();\n    const [movieIds, setMovieIds] = useState([]);\n\n    useEffect(() => {\n        setMovieIds(route.params.movieIds);\n        refreshMovie(route.params.movieIds);\n    }, []);\n\n     const refreshMovie = (movies) => {\n        const randomMovie = movies[Math.floor(Math.random() * movies.length)];\n        firebaseDB.ref(\"movies/\" + randomMovie).once('value', function(snapshot) {\n            setMovie(snapshot.val());\n        });\n    }\n\n    return (\n        <View style={styles.container}>\n            { movie && \n                <MovieCard movie={movie}></MovieCard>\n            }\n            <Button title=\"Refresh\"\n                    onPress={() => refreshMovie(movieIds)}\n                    style={styles.button}></Button>\n        </View>\n\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        padding: 20\n    }\n});","import React, { useState } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { Button, Input } from 'react-native-elements';\nimport { firebaseAuth, firebaseDB } from '../services/firebase';\nimport { useDispatch } from 'react-redux'\nimport { updateState } from '../actions';\n\nexport const LoginScreen = ({ route, navigation }) => { \n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const dispatch = useDispatch();\n\n    const handleEmailChange = (e) => {\n        setEmail(e);\n    }\n\n    const handlePasswordChange = (e) => {\n        setPassword(e);\n    }\n\n    const updateAppState = updates => dispatch(updateState(updates))\n\n    const handleSubmit = () => {\n        firebaseAuth.signInWithEmailAndPassword(email, password)\n        .then((user) => {\n            retrieveAPIKey(user);\n        }).catch((error) => {\n           console.log(error);\n        });\n    }\n    \n    const retrieveAPIKey = (user) => {\n        firebaseDB.ref(\"rapid_api_key\").once('value', function(snapshot) {\n            let updates = {\n                user: user,\n                can_edit: true,\n                rapid_api_key: snapshot.val()\n            }\n            updateAppState(updates);\n            navigation.navigate(\"Home\", { });\n        })\n    }\n\n    return (\n        <View style={styles.container}>\n            <Input label=\"Email\"\n                   onChangeText={handleEmailChange}></Input>\n            <Input label=\"Password\"\n                   secureTextEntry={true}\n                   onChangeText={handlePasswordChange}></Input>\n            <Button title=\"Submit\"\n                    onPress={handleSubmit}></Button>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        padding: 20\n    }\n});\n\nexport default LoginScreen;","export function updateState(payload) {\n    return { type: 'UPDATE_STATE', payload };\n}","export const initialState = {\n    user: '',\n    can_edit: false,\n    rapid_api_key: ''\n}\n\nfunction rootReducer(state = initialState, action) {\n  if (action.type === 'UPDATE_STATE') {\n    return Object.assign({}, state, action.payload);\n  }\n  return state;\n}\n\nexport default rootReducer;","import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { HomeScreen } from './screens/HomeScreen';\nimport { AddMovieScreen } from './screens/AddMovieScreen';\nimport { MoviesScreen } from './screens/MoviesScreen';\nimport { ListsScreen } from './screens/ListsScreen';\nimport { ListScreen } from './screens/ListScreen';\nimport { AddMovieToListScreen } from './screens/AddMovieToListScreen';\nimport { RemoveMovieFromListScreen } from './screens/RemoveMovieFromListScreen';\nimport { RandomMovieScreen } from './screens/RandomMovieScreen';\nimport { LoginScreen } from './screens/LoginScreen';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from './reducers'\n\nconst Stack = createStackNavigator();\nconst store = createStore(rootReducer);\n\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <NavigationContainer>\n        <Stack.Navigator initialRouteName=\"Home\">\n          <Stack.Screen name=\"Home\" component={HomeScreen} />\n          <Stack.Screen name=\"Add Movie\" component={AddMovieScreen} />\n          <Stack.Screen name=\"Movies\" component={MoviesScreen} />\n          <Stack.Screen name=\"Lists\" component={ListsScreen} />\n          <Stack.Screen name=\"List\" component={ListScreen} \n                        options={({ route }) => ({ title: route.params.name })} />\n          <Stack.Screen name=\"Add Movie To List\" component={AddMovieToListScreen} />\n          <Stack.Screen name=\"Remove Movie From List\" component={RemoveMovieFromListScreen} />\n          <Stack.Screen name=\"Random Movie\" component={RandomMovieScreen} />\n          <Stack.Screen name=\"Login\" component={LoginScreen} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </Provider>\n  );\n}","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/marcs-movies/expo-service-worker.js', { scope: '/marcs-movies/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}