{"version":3,"sources":["screens/HomeScreen.js","secrets.js","services/firebase.js","components/MovieCard.js","components/AddMovieForm.js","screens/AddMovieScreen.js","screens/MoviesScreen.js","screens/ListsScreen.js","screens/ListScreen.js","screens/AddMovieToListScreen.js","screens/RemoveMovieFromListScreen.js","screens/RandomMovieScreen.js","App.js","web-build/register-service-worker.js"],"names":["HomeScreen","route","navigation","SafeAreaView","style","styles","container","h4","marginBottom","h3","title","onPress","navigate","button","StyleSheet","create","flex","alignItems","margin","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseDB","MovieCard","this","props","editable","onEdit","movieAttributeStyle","marginTop","movieAttributeNameStyle","fontWeight","Fragment","movie","TouchableOpacity","movieCard","handlePress","id","View","flexDirection","flexGrow","year","Image","source","uri","poster","resizeMode","genre","runtime","actors","director","imdbRating","plot","Component","backgroundColor","padding","borderRadius","AddMovieForm","state","imdbID","e","value","toLowerCase","setState","url","fetch","method","headers","then","response","json","result","parseMovieData","movieData","Title","Year","Genre","Actors","Runtime","Director","Plot","Poster","ref","push","onReturnHome","label","onChangeText","handleImdbIDChange","handleSearch","handleAddMovie","containerStyle","handleBack","AddMovieScreen","MoviesScreen","useState","movies","setMovies","useEffect","refreshMovies","addListener","once","snapshot","data","forEach","datapoint","val","key","sort","a","b","aTitle","bTitle","map","Text","ListsScreen","lists","setLists","isAdding","setIsAdding","newList","setNewList","refreshLists","list","movieIds","Object","entries","aName","name","bName","type","ListScreen","listId","setListId","setMovieIds","params","ids","i","length","j","Math","floor","random","shuffle","filter","includes","goToEditMovieScreen","AddMovieToListScreen","addMovieToList","movieId","newMovieIds","RemoveMovieFromListScreen","setMovie","backToList","index","indexOf","splice","remove","RandomMovieScreen","refreshMovie","randomMovie","Stack","createStackNavigator","App","NavigationContainer","Navigator","initialRouteName","Screen","component","options","navigator","window","addEventListener","serviceWorker","register","scope","info","catch","error","console"],"mappings":"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","file":"static/js/app.53b1bbc7.chunk.js","sourcesContent":["import React from \"react\";\nimport { SafeAreaView, StyleSheet } from \"react-native\";\nimport { Button, Text } from 'react-native-elements';\nimport { EDITING_ENABLED } from '../secrets';\n\nexport const HomeScreen = ({ route, navigation }) => {\n\n    const goToMoviesScreen = () => {\n        navigation.navigate(\"Movies\", { });\n    }\n\n    const goToListsScreen = () => {\n        navigation.navigate(\"Lists\", { });\n    }\n\n    return (\n        <SafeAreaView style={styles.container}>\n            <Text h4 style={{marginBottom: 30}}>Need an idea for a movie to watch? Check out the lists!</Text>\n            <Text h3 style={{marginBottom: 20}}>Movie Lists</Text>\n            <Button title=\"See Lists\"\n                    onPress={goToListsScreen}\n                    style={styles.button}></Button>\n            { EDITING_ENABLED &&\n                <React.Fragment>\n                        <Text h3 style={{marginBottom: 20}}>Movie Management</Text>\n                        <Button title=\"Manage\"\n                                onPress={goToMoviesScreen}\n                                style={styles.button}></Button>\n                </React.Fragment>\n            }\n\n        </SafeAreaView>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      alignItems: 'center',\n      margin: 20\n    },\n    button: {\n        marginBottom: 20\n    }\n  });","export const FIREBASE_CONFIG = {\n    apiKey: \"AIzaSyCc7bc5d8oxIHvy_zyMaG-fYjecX_FuEjo\",\n    authDomain: \"marcs-movies.firebaseapp.com\",\n    databaseURL: \"https://marcs-movies.firebaseio.com\",\n    projectId: \"marcs-movies\",\n    storageBucket: \"marcs-movies.appspot.com\",\n    messagingSenderId: \"502568475623\",\n    appId: \"1:502568475623:web:6fdb31741a1ee95bd2bb42\",\n    measurementId: \"G-CDV1J8J40Q\"\n};\nexport const RAPID_API_KEY = \"20cb930c7amshc248a9c3f59cb3bp13c3c5jsn6150c7779d2b\";\nexport const EDITING_ENABLED = false","import * as firebase from 'firebase';\nimport { FIREBASE_CONFIG } from '../secrets';\n\nfirebase.initializeApp(FIREBASE_CONFIG);\n\nexport const firebaseDB = firebase.database();","import React, { Component } from 'react';\nimport { View, Image, StyleSheet, TouchableOpacity } from 'react-native'\nimport { Text } from 'react-native-elements';\nimport { Button } from 'react-native-elements';\nimport { EDITING_ENABLED } from '../secrets';\n\nclass MovieCard extends Component {\n    handlePress() {\n        if (this.props.onPress && EDITING_ENABLED) {\n            this.props.onPress(this.props.movie.id);\n        }\n    }\n\n    handleEdit() {\n        if (this.props.editable && this.props.onEdit && EDITING_ENABLED) {\n            this.props.onEdit(this.props.movie);\n        }\n    }\n\n    render() {\n        const movieAttributeStyle = {\n            marginTop: 5,\n            marginBottom: 5\n        }\n        const movieAttributeNameStyle = {\n            fontWeight: \"bold\"\n        }\n        return (\n            <React.Fragment>\n                { this.props.movie != null && \n                    <TouchableOpacity style={styles.movieCard} onPress={() => this.handlePress(this.props.movie.id)}>\n                        <View style={{ flex: 1, flexDirection: 'row', marginBottom: 10 }}>\n                            <Text h4 style={{ flexGrow: 1 }}>{this.props.movie.title} ({this.props.movie.year})</Text>\n                            { this.props.editable && EDITING_ENABLED &&\n                                <Button title=\"Edit\" \n                                        type=\"outline\" \n                                        titleStyle={{ fontSize: 12 }} \n                                        onPress={() => this.handleEdit()}/>\n                            }\n                        </View>\n                        <View style={{ flex: 1, flexDirection: 'row' }}>\n                            <Image source={{uri: this.props.movie.poster}} \n                                style={{ flex: 1, resizeMode: 'contain', margin: 10 }}></Image>\n                            <View style={{ flex: 1 }}>\n                                <Text style={movieAttributeStyle}>\n                                    <Text style={movieAttributeNameStyle}>Genres: </Text>\n                                    {this.props.movie.genre} \n                                </Text>\n                                <Text style={movieAttributeStyle}>\n                                    <Text style={movieAttributeNameStyle}>Runtime: </Text>\n                                    {this.props.movie.runtime} \n                                </Text>\n                                <Text style={movieAttributeStyle}>\n                                    <Text style={movieAttributeNameStyle}>Actors: </Text>\n                                    {this.props.movie.actors} \n                                </Text>\n                                <Text style={movieAttributeStyle}>\n                                    <Text style={movieAttributeNameStyle}>Director: </Text>\n                                    {this.props.movie.director} \n                                </Text>\n                                <Text style={movieAttributeStyle}>\n                                    <Text style={movieAttributeNameStyle}>IMDB Rating: </Text>\n                                    {this.props.movie.imdbRating} \n                                </Text>              \n                            </View>\n                        </View>\n                        <Text style={movieAttributeStyle}>{this.props.movie.plot}</Text>\n                    </TouchableOpacity>\n                }\n            </React.Fragment>\n        )\n    }\n}\n\nexport default MovieCard;\n\nconst styles = StyleSheet.create({\n    movieCard: {\n        backgroundColor: '#fff',\n        padding: 15,\n        borderRadius: 10,\n        marginBottom: 20\n    }\n});","import React, { Component } from 'react';\nimport { Input, Button } from 'react-native-elements'\nimport { View, StyleSheet } from \"react-native\";\nimport { RAPID_API_KEY } from '../secrets';\nimport { firebaseDB } from '../services/firebase';\nimport MovieCard from '../components/MovieCard';\n\nclass AddMovieForm extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { \n            imdbID: '',\n            movie: null\n        }\n    }\n\n    handleImdbIDChange(e) {\n        if (e) {\n            const value = e.toLowerCase();\n            this.setState({ imdbID: value });\n        }\n    }\n\n    handleSearch() {\n        const url = \"https://movie-database-imdb-alternative.p.rapidapi.com/?r=json&i=\" + this.state.imdbID;\n        fetch(url, {\n            method: \"GET\",\n            headers: {\n                \"x-rapidapi-host\": \"movie-database-imdb-alternative.p.rapidapi.com\",\n                \"x-rapidapi-key\": RAPID_API_KEY,\n                \"useQueryString\": true\n            },\n          }).then(response => response.json())\n           .then(result =>  {\n               this.parseMovieData(result);\n               this.setState({ imdbID: '' });\n            });\n    }\n\n    parseMovieData(movieData) {\n        const movie = {\n            title: movieData.Title,\n            year: movieData.Year,\n            genre: movieData.Genre,\n            actors: movieData.Actors,\n            runtime: movieData.Runtime,\n            director: movieData.Director,\n            imdbRating: movieData.imdbRating,\n            plot: movieData.Plot,\n            poster: movieData.Poster\n        }\n        this.setState({ movie: movie });\n    }\n\n    handleAddMovie() {\n        firebaseDB.ref('movies').push(this.state.movie);\n        this.props.onReturnHome();\n    }\n\n    handleBack() {\n        this.setState({ movie: null });\n    }\n\n    render() {\n        return (\n            <View style={styles.container}>\n                { this.state.movie == null &&\n                    <React.Fragment>\n                        <Input label=\"IMDB Movie ID\"\n                               onChangeText={(e) => this.handleImdbIDChange(e)}></Input>\n                        <Button title=\"Search IMBD\"\n                                onPress={() => this.handleSearch()}></Button>\n                    </React.Fragment>\n                }\n                { this.state.movie != null && \n                    <React.Fragment>\n                        <MovieCard movie={this.state.movie}></MovieCard>\n                        <Button title=\"Add Movie\"\n                                onPress={() => this.handleAddMovie()}\n                                containerStyle={{ marginBottom: 15 }}></Button>\n                        <Button title=\"Back to Search\"\n                                onPress={() => this.handleBack()}\n                                containerStyle={{ marginBottom: 15 }}></Button>\n                    </React.Fragment>\n                }\n            </View>\n        )\n    }\n};\n\nexport default AddMovieForm;\n\nconst styles = StyleSheet.create({\n    container: {\n      padding: 20\n    }\n});","import React from \"react\";\nimport { SafeAreaView } from \"react-native\";\nimport AddMovieForm from \"../components/AddMovieForm\";\n\nexport const AddMovieScreen = ({ route, navigation }) => {\n    const goHomeScreen = () => {\n        navigation.navigate(\"Movies\", { });\n    }\n\n    return (\n        <SafeAreaView>\n            <AddMovieForm onReturnHome={goHomeScreen}></AddMovieForm>\n        </SafeAreaView>\n    );\n};","import React, { useState, useEffect } from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { firebaseDB } from '../services/firebase';\nimport MovieCard from '../components/MovieCard';\nimport { Button } from 'react-native-elements';\n\nexport const MoviesScreen = ({ route, navigation }) => {\n    const [movies, setMovies] = useState();\n\n    useEffect(() => {\n        refreshMovies();\n        const navSubscription = navigation.addListener('focus', () => {\n            refreshMovies();\n        });\n     }, []);\n\n     const refreshMovies = () => {\n        firebaseDB.ref(\"movies\").once('value', function(snapshot) {\n            let data = []\n            snapshot.forEach(datapoint => {\n                const movie = datapoint.val();\n                movie.id = datapoint.key\n                data.push(movie);\n            })\n            data.sort(function(a, b) {\n                const aTitle = a.title.toLowerCase();\n                const bTitle = b.title.toLowerCase();\n                return (aTitle < bTitle) ? -1 : (aTitle > bTitle) ? 1 : 0;\n            });\n            setMovies(data);\n        });\n     }\n\n     const goToAddMovieScreen = () => {\n        navigation.navigate(\"Add Movie\", { });\n    }\n\n    return movies ? (\n        <View style={styles.container}>\n            <Button title=\"Add Movie\"\n                    onPress={goToAddMovieScreen}\n                    style={styles.button}></Button>\n            { movies.map(movie => \n                <MovieCard key={movie.id} movie={movie}></MovieCard>\n            )}\n        </View>\n      ) : (\n        <View style={styles.container}>\n            <Text>Loading...</Text>\n        </View>\n      );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        padding: 20\n    },\n    button: {\n        marginBottom: 20\n    }\n});","import React, { useState, useEffect } from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { firebaseDB } from '../services/firebase';\nimport { Button, Input } from 'react-native-elements';\nimport { EDITING_ENABLED } from '../secrets';\n\nexport const ListsScreen = ({ route, navigation }) => {\n    const [lists, setLists] = useState();\n    const [isAdding, setIsAdding] = useState(false);\n    const [newList, setNewList] = useState();\n\n    useEffect(() => {\n        setIsAdding(false);\n        refreshLists();\n     }, []);\n\n    const refreshLists = () => {\n        firebaseDB.ref(\"lists\").once('value', function(snapshot) {\n            let data = []\n            snapshot.forEach(datapoint => {\n                var list = datapoint.val();\n                list.id = datapoint.key;\n                if (list.movies) {\n                    list.movieIds = Object.entries(list.movies).map(([k,v]) => v);\n                } else {\n                    list.movies = [];\n                    list.movieIds = [];\n                }\n                data.push(list);\n            })\n            data.sort(function(a, b) {\n                const aName = a.name.toLowerCase();\n                const bName= b.name.toLowerCase();\n                return (aName < bName) ? -1 : (aName > bName) ? 1 : 0;\n            });\n            setLists(data);\n        });\n    }\n\n    const showListForm = () => {\n        setIsAdding(true);\n    }\n\n    const handleNameChange = (e) => {\n        setNewList(e)\n    }\n\n    const cancelAdd = () => {\n        setIsAdding(false);\n    }\n\n    const addList = () => {\n        firebaseDB.ref('lists').push({ name: newList });\n        setIsAdding(false);\n        refreshLists();\n    }\n\n    const goToListScreen = (id, name, movieIds) => {\n        navigation.navigate(\"List\", { id: id, name: name, movieIds: movieIds});\n    }\n\n    return isAdding ? (\n        <View style={styles.container}>\n            <Input label=\"List Name\"\n                   onChangeText={handleNameChange}></Input>\n            <Button title=\"Add\"\n                    onPress={addList}\n                    style={styles.button}></Button>\n            <Button title=\"Cancel\"\n                    onPress={cancelAdd}\n                    style={styles.button}></Button>\n        </View>\n        ) : lists ? (\n        <View style={styles.container}>\n            { lists.map(list => \n                <Button key={list.id}\n                        title={list.name}\n                        type=\"outline\" \n                        style={styles.button} \n                        onPress={() => goToListScreen(list.id, list.name, list.movieIds)}/>\n            )}\n            { EDITING_ENABLED && \n                <Button title=\"Add List\"\n                        onPress={showListForm}></Button>\n            }\n        </View>\n        ) : (\n        <View style={styles.container}>\n            <Text>Loading...</Text>\n        </View>\n      );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        padding: 20\n    },\n    button: {\n        marginBottom: 20\n    }\n});","import React, { useState, useEffect } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { firebaseDB } from '../services/firebase';\nimport { Button, Text } from 'react-native-elements';\nimport MovieCard from '../components/MovieCard';\nimport { EDITING_ENABLED } from '../secrets';\n\nexport const ListScreen = ({ route, navigation }) => {\n    const [listId, setListId] = useState();\n    const [movieIds, setMovieIds] = useState([]);\n    const [movies, setMovies] = useState([]);\n\n    useEffect(() => {\n        setListId(route.params.id);\n        setMovieIds(route.params.movieIds);\n        refreshMovies(route.params.movieIds);\n        const navSubscription = navigation.addListener('focus', () => {\n            refreshMovies(route.params.movieIds);\n        });\n    }, []);\n\n    const refreshMovies = (ids) => {\n        setMovies([]);\n        firebaseDB.ref(\"movies\").once('value', function(snapshot) {\n            let data = []\n            snapshot.forEach(datapoint => {\n                const movie = datapoint.val();\n                movie.id = datapoint.key;\n                data.push(movie);\n            })\n            data = data.filter(movie => ids.includes(movie.id));\n            data = shuffle(data);\n            setMovies(data);\n        });\n    };\n\n    function shuffle(list) {\n        for (let i = list.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [list[i], list[j]] = [list[j], list[i]];\n        }\n        return list;\n    }\n\n    const goToAddMoviesScreen = () => {\n        navigation.navigate(\"Add Movie To List\", { listId: listId, movieIds: movieIds });\n    }\n\n    const goToEditMovieScreen = (movie) => {\n        navigation.navigate(\"Remove Movie From List\", { listId: listId, movieIds: movieIds, movie: movie });\n    }\n\n    const goToRandomMovieScreen = () => {\n        navigation.navigate(\"Random Movie\", { movieIds: movieIds });\n    }\n\n    return (\n        <View style={styles.container}>\n            <Text h3 style={{marginBottom: 20}}>Total Movies: {movies.length}</Text>\n            <Button title=\"Random Movie\"\n                    onPress={goToRandomMovieScreen}\n                    style={styles.button}></Button>\n            { EDITING_ENABLED && \n                <Button title=\"Add Movie\"\n                        onPress={goToAddMoviesScreen}\n                        style={styles.button}></Button>\n            }\n            { movies.map(movie => \n                <MovieCard key={movie.id} \n                           movie={movie}\n                           editable={true}\n                           onEdit={goToEditMovieScreen}></MovieCard>\n            )}\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        padding: 20\n    },\n    button: {\n        marginBottom: 20\n    }\n});","import React, { useState, useEffect } from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { firebaseDB } from '../services/firebase';\nimport MovieCard from '../components/MovieCard';\n\nexport const AddMovieToListScreen = ({ route, navigation }) => {\n    const [listId, setListId] = useState();\n    const [movieIds, setMovieIds] = useState([]);\n    const [movies, setMovies] = useState([]);\n\n    useEffect(() => {\n        setListId(route.params.listId);\n        setMovieIds(route.params.movieIds);\n        refreshMovies(route.params.movieIds);\n        const navSubscription = navigation.addListener('focus', () => {\n            refreshMovies(route.params.movieIds);\n        });\n    }, []);\n\n    const refreshMovies = (ids) => {\n        firebaseDB.ref(\"movies\").once('value', function(snapshot) {\n            let data = []\n            snapshot.forEach(datapoint => {\n                const movie = datapoint.val();\n                movie.id = datapoint.key;\n                data.push(movie);\n            });\n            data = data.filter(movie => !ids.includes(movie.id));\n            data.sort(function(a, b) {\n                const aTitle = a.title.toLowerCase();\n                const bTitle = b.title.toLowerCase();\n                return (aTitle < bTitle) ? -1 : (aTitle > bTitle) ? 1 : 0;\n            });\n            setMovies(data);\n        });\n    }\n\n    const addMovieToList = (movieId) => {\n        firebaseDB.ref('lists/' + listId + '/movies').push(movieId).then(() => {\n            const newMovieIds = movieIds;\n            newMovieIds.push(movieId);\n            navigation.navigate(\"List\", { id: listId, movieIds: newMovieIds });\n        });\n    }\n\n    return movies ? (\n        <View style={styles.container}>\n            { movies.map(movie => \n                <MovieCard key={movie.id} \n                           movie={movie}\n                           onPress={addMovieToList}></MovieCard>\n            )}\n        </View>\n      ) : (\n        <View style={styles.container}>\n            <Text>Loading...</Text>\n        </View>\n      );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        padding: 20\n    }\n});","import React, { useState, useEffect } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { Text } from 'react-native-elements'\nimport { Button } from 'react-native-elements';\nimport { firebaseDB } from '../services/firebase';\n\nexport const RemoveMovieFromListScreen = ({ route, navigation }) => {\n    const [listId, setListId] = useState();\n    const [movie, setMovie] = useState({});\n    const [movieIds, setMovieIds] = useState([]);\n\n    useEffect(() => {\n        setListId(route.params.listId);\n        setMovie(route.params.movie);\n        setMovieIds(route.params.movieIds);\n    }, []);\n\n    const cancel = () => {\n        navigation.navigate(\"List\", { id: listId, movieIds: newMovieIds });\n    }\n\n    const remove = () => {\n        firebaseDB.ref('lists/' + listId + '/movies').once('value', function(snapshot) {\n            snapshot.forEach(datapoint => {\n                if (datapoint.val() == movie.id) {\n                    datapoint.ref.remove().then(() => {\n                        backToList();\n                    });\n                }\n            });\n        });\n    }\n\n    const backToList = () => {\n        const newMovieIds = movieIds;\n        const index = newMovieIds.indexOf(movie.id);\n        newMovieIds.splice(index, 1);\n        navigation.navigate(\"List\", { id: listId, movieIds: newMovieIds });\n    }\n\n    return (\n        <View style={styles.container}>\n            <Text h4 style={{ marginBottom: 20 }}>Remove {movie.title} ({movie.year}) from the list?</Text>\n            <Button title=\"Remove\"\n                    onPress={remove}\n                    style={styles.button}></Button>\n            <Button title=\"Cancel\"\n                    onPress={cancel}\n                    style={styles.button} \n                    type=\"outline\"></Button>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        padding: 20\n    },\n    button: {\n        marginBottom: 20\n    }\n});","import React, { useState, useEffect } from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { firebaseDB } from '../services/firebase';\nimport MovieCard from '../components/MovieCard';\nimport { Button } from 'react-native-elements';\n\nexport const RandomMovieScreen = ({ route, navigation }) => {\n    const [movie, setMovie] = useState();\n    const [movieIds, setMovieIds] = useState([]);\n\n    useEffect(() => {\n        setMovieIds(route.params.movieIds);\n        refreshMovie(route.params.movieIds);\n    }, []);\n\n     const refreshMovie = (movies) => {\n        const randomMovie = movies[Math.floor(Math.random() * movies.length)];\n        firebaseDB.ref(\"movies/\" + randomMovie).once('value', function(snapshot) {\n            setMovie(snapshot.val());\n        });\n    }\n\n    return (\n        <View style={styles.container}>\n            { movie && \n                <MovieCard movie={movie}></MovieCard>\n            }\n            <Button title=\"Refresh\"\n                    onPress={() => refreshMovie(movieIds)}\n                    style={styles.button}></Button>\n        </View>\n\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        padding: 20\n    }\n});","import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { HomeScreen } from './screens/HomeScreen';\nimport { AddMovieScreen } from './screens/AddMovieScreen';\nimport { MoviesScreen } from './screens/MoviesScreen';\nimport { ListsScreen } from './screens/ListsScreen';\nimport { ListScreen } from './screens/ListScreen';\nimport { AddMovieToListScreen } from './screens/AddMovieToListScreen';\nimport { RemoveMovieFromListScreen } from './screens/RemoveMovieFromListScreen';\nimport { RandomMovieScreen } from './screens/RandomMovieScreen';\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Add Movie\" component={AddMovieScreen} />\n        <Stack.Screen name=\"Movies\" component={MoviesScreen} />\n        <Stack.Screen name=\"Lists\" component={ListsScreen} />\n        <Stack.Screen name=\"List\" component={ListScreen} \n                      options={({ route }) => ({ title: route.params.name })} />\n        <Stack.Screen name=\"Add Movie To List\" component={AddMovieToListScreen} />\n        <Stack.Screen name=\"Remove Movie From List\" component={RemoveMovieFromListScreen} />\n        <Stack.Screen name=\"Random Movie\" component={RandomMovieScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/marcs-movies/expo-service-worker.js', { scope: '/marcs-movies/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}